{
  "title": "JSON schema for Oradew configuration file",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "type": "object",
  "properties": {
    "package.input": {
      "default": [
        "./scripts/**/initial*.sql",
        "./src/**/*.sql",
        "./scripts/**/final*.sql"
      ],
      "description": "Glob pattern for packaging files into deployment script.",
      "type": "array"
    },
    "package.output": {
      "default": "./deploy/{schema-name}.sql",
      "description": "Deployment script file path. \nVariable {schema-name} is used to group files by schema into separate scripts. It can be used anywhere in the path or removed altogether.",
      "type": "string"
    },
    "package.encoding": {
      "default": "utf8",
      "description": "Deployment script encoding. \n(utf8, win1250, ...)",
      "type": "string"
    },
    "package.templating": {
      "default": false,
      "description": "Package templating of config variables in sql files. \nex.usage in sql code: '${config[\"version.number\"]}'",
      "type": "boolean"
    },
    "package.exclude": {
      "default": [
        "./scripts/**/+(file|run)*.sql"
      ],
      "description": "Glob pattern to exclude files from package input.",
      "type": "array"
    },
    "source.input": {
      "default": [
        "./src/**/*.sql"
      ],
      "description": "Glob pattern for Source files.",
      "type": "array"
    },
    "source.encoding": {
      "default": "utf8",
      "description": "Source files encoding. \n(utf8, win1250, ...)",
      "type": "string"
    },
    "compile.warnings": {
      "default": "NONE",
      "description": "Compilation warning scopes.",
      "type": "string",
      "enum": [
        "NONE",
        "ALL",
        "PERFORMANCE",
        "INFORMATIONAL",
        "SEVERE"
      ]
    },
    "compile.force": {
      "default": false,
      "description": "Ignore conflict detection of local file changes and overwrite object on DB.",
      "type": "boolean"
    },
    "compile.stageFile": {
      "default": false,
      "description": "Automatically stage file after is succesfully compiled (git add).",
      "type": "boolean"
    },
    "version.number": {
      "default": "0.0.1",
      "description": "Version number.",
      "type": "string"
    },
    "version.description": {
      "default": "New feature",
      "description": "Version description.",
      "type": "string"
    },
    "version.releaseDate": {
      "default": "2099-01-01",
      "description": "Version release date.",
      "type": "string",
      "format": "date"
    },
    "test.input": {
      "default": [
        "./test/**/*.test.sql"
      ],
      "description": "Glob pattern for tests.",
      "type": "array"
    },
    "import.getDdlFunction": {
      "default": "dbms_metadata.get_ddl",
      "description": "DDL function name. Use your own DB function to customize import of object's DDL. \"DBMS_METADATA.GET_DDL\" by default. \nex.custom DB func.spec.: FUNCTION GetDDL(object_type IN VARCHAR2, name IN VARCHAR2, schema IN VARCHAR2 DEFAULT NULL) RETURN CLOB;",
      "type": "string"
    },
    "source.pattern": {
      "description": "Define source structure for object types",
      "type": "object",
      "default": {
        "packageSpec": "./src/{schema-name}/PACKAGES/{object-name}.sql",
        "packageBody": "./src/{schema-name}/PACKAGE_BODIES/{object-name}.sql",
        "trigger": "./src/{schema-name}/TRIGGERS/{object-name}.sql",
        "typeSpec": "./src/{schema-name}/TYPES/{object-name}.sql",
        "typeBody": "./src/{schema-name}/TYPE_BODIES/{object-name}.sql",
        "view": "./src/{schema-name}/VIEWS/{object-name}.sql",
        "function": "./src/{schema-name}/FUNCTIONS/{object-name}.sql",
        "procedure": "./src/{schema-name}/PROCEDURES/{object-name}.sql",
        "table": "./src/{schema-name}/TABLES/{object-name}.sql",
        "synonym": "./src/{schema-name}/SYNONYMS/{object-name}.sql",
        "apex": "./src/{schema-name}/APEX/{object-name}.sql"
      },
      "properties": {
        "packageSpec": {
          "default": "./src/{schema-name}/PACKAGES/{object-name}.sql",
          "description": "Pattern for package specifications",
          "type": "string"
        },
        "packageBody": {
          "default": "./src/{schema-name}/PACKAGE_BODIES/{object-name}.sql",
          "description": "Pattern for package bodies",
          "type": "string"
        },
        "trigger": {
          "default": "./src/{schema-name}/TRIGGERS/{object-name}.sql",
          "description": "Pattern for triggers",
          "type": "string"
        },
        "typeSpec": {
          "default": "./src/{schema-name}/TYPES/{object-name}.sql",
          "description": "Pattern for type specifications",
          "type": "string"
        },
        "typeBody": {
          "default": "./src/{schema-name}/TYPE_BODIES/{object-name}.sql",
          "description": "Pattern for type bodies",
          "type": "string"
        },
        "view": {
          "default": "./src/{schema-name}/VIEWS/{object-name}.sql",
          "description": "Pattern for views",
          "type": "string"
        },
        "function": {
          "default": "./src/{schema-name}/FUNCTIONS/{object-name}.sql",
          "description": "Pattern for functions",
          "type": "string"
        },
        "procedure": {
          "default": "./src/{schema-name}/PROCEDURES/{object-name}.sql",
          "description": "Pattern for procedures",
          "type": "string"
        },
        "table": {
          "default": "./src/{schema-name}/TABLES/{object-name}.sql",
          "description": "Pattern for tables",
          "type": "string"
        },
        "synonym": {
          "default": "./src/{schema-name}/SYNONYMS/{object-name}.sql",
          "description": "Pattern for synonyms",
          "type": "string"
        },
        "apex": {
          "default": "./src/{schema-name}/APEX/{object-name}.sql",
          "description": "Pattern for apex applications",
          "type": "string"
        }
      }
    },
    "import.ease": {
      "default": true,
      "description": "When set to 'true' it will import only DB objects that changed on DB in comparision to project Source files",
      "type": "boolean"
    }
  }
}